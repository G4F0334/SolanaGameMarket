import { createUmi } from '@metaplex-foundation/umi-bundle-defaults';
import { generateSigner, percentAmount, sol } from '@metaplex-foundation/umi';

/**
 * üéÆ Umi Client —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–∫ —Ä–µ–∂–∏–º–∞
 */

class UmiClient {
  constructor() {
    this.umi = null;
    this.initialized = false;
    this.mockMode = false; // –†–µ–∂–∏–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–æ–∫ —Ä–µ–∂–∏–º–∞
   */
  async initialize(rpcUrl = 'http://localhost:8899', keypairPath = null, useMockMode = false) {
    try {
      this.mockMode = useMockMode;

      if (this.mockMode) {
        console.log('üé≠ –ó–∞–ø—É—â–µ–Ω –≤ –º–æ–∫ —Ä–µ–∂–∏–º–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞)');
        this.initialized = true;
        return { mockMode: true };
      }

      // –†–µ–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      this.umi = createUmi(rpcUrl);

      if (keypairPath) {
        const { readFileSync } = await import('fs');
        const keypairData = JSON.parse(readFileSync(keypairPath, 'utf8'));
        const keypair = this.umi.eddsa.createKeypairFromSecretKey(new Uint8Array(keypairData));
        this.umi.use(keypair);
      }

      this.initialized = true;
      console.log('‚úÖ Umi –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('üîó RPC URL:', rpcUrl);
      
      return this.umi;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Umi:', error);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –º–æ–∫ —Ä–µ–∂–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
      console.log('üé≠ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –º–æ–∫ —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      this.mockMode = true;
      this.initialized = true;
      
      return { mockMode: true, error: error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (—Å –º–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π)
   */
  async createGameCollection(gameData) {
    if (!this.initialized) {
      throw new Error('Umi –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    if (this.mockMode) {
      // –ú–æ–∫ –æ—Ç–≤–µ—Ç
      const mockMint = `mock_collection_${Date.now()}`;
      console.log('üé≠ [MOCK] –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', gameData.name);
      
      return {
        success: true,
        collectionMint: mockMint,
        metadata: {
          name: gameData.name,
          symbol: gameData.symbol,
          description: gameData.description
        },
        message: `[MOCK] –ö–æ–ª–ª–µ–∫—Ü–∏—è "${gameData.name}" —Å–æ–∑–¥–∞–Ω–∞`
      };
    }

    // –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    try {
      const collectionMint = generateSigner(this.umi);
      
      // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
      
      return {
        success: true,
        collectionMint: collectionMint.publicKey,
        metadata: { /* —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */ },
        message: `–ö–æ–ª–ª–µ–∫—Ü–∏—è "${gameData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`
      };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ NFT (—Å –º–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π)
   */
  async createItemNFT(itemData, collectionMint) {
    if (!this.initialized) {
      throw new Error('Umi –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    if (this.mockMode) {
      const mockMint = `mock_nft_${Date.now()}`;
      console.log('üé≠ [MOCK] –°–æ–∑–¥–∞–Ω–∏–µ NFT:', itemData.name);
      
      return {
        success: true,
        itemMint: mockMint,
        collectionMint,
        metadata: {
          name: itemData.name,
          description: itemData.description,
          attributes: [
            { trait_type: 'Type', value: itemData.type },
            { trait_type: 'Rarity', value: itemData.rarity }
          ]
        },
        message: `[MOCK] NFT "${itemData.name}" —Å–æ–∑–¥–∞–Ω`
      };
    }

    // –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT
    try {
      const itemMint = generateSigner(this.umi);
      
      return {
        success: true,
        itemMint: itemMint.publicKey,
        collectionMint,
        metadata: { /* —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */ },
        message: `NFT "${itemData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`
      };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async checkConnection() {
    if (!this.initialized) return false;
    
    if (this.mockMode) {
      return true; // –í –º–æ–∫ —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ "–ø–æ–¥–∫–ª—é—á–µ–Ω"
    }

    try {
      await this.umi.rpc.getSlot();
      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
   */
  async getWalletBalance() {
    if (!this.initialized) {
      throw new Error('Umi –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    if (this.mockMode) {
      return {
        success: true,
        publicKey: 'mock_wallet_address',
        balance: 10.0, // –ú–æ–∫ –±–∞–ª–∞–Ω—Å
        balanceLamports: 10000000000
      };
    }

    try {
      const balance = await this.umi.rpc.getBalance(this.umi.identity.publicKey);
      return {
        success: true,
        publicKey: this.umi.identity.publicKey,
        balance: Number(balance.basisPoints) / 1000000000,
        balanceLamports: balance.basisPoints
      };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å –º–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π...
}

export const umiClient = new UmiClient();
export default UmiClient;
