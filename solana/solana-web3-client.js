import {
    Connection,
    Keypair,
    PublicKey,
    Transaction,
    SystemProgram,
    LAMPORTS_PER_SOL,
    clusterApiUrl
} from "@solana/web3.js";
import {
    createUmi
} from "@metaplex-foundation/umi-bundle-defaults";
import {
    generateSigner,
    keypairIdentity,
    publicKey,
    sol,
    percentAmount,
    transactionBuilder,
    some
} from "@metaplex-foundation/umi";
import {
    createNft,
    mplTokenMetadata,
    findMetadataPda,
    createMetadataAccountV3,
    createMasterEditionV3
} from "@metaplex-foundation/mpl-token-metadata";
import bs58 from "bs58";

/**
 * üéÆ Solana Web3.js –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è NFT
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ NFT —á–µ—Ä–µ–∑ Metaplex –∏ —Ä–∞–±–æ—Ç—É —Å marketplace
 */
class SolanaWeb3Client {
    constructor() {
        this.connection = null;
        this.wallet = null;
        this.umi = null;
        this.initialized = false;
        this.network = "devnet"; // devnet, testnet, mainnet-beta
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤–∞—à–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º
     * @param {string} privateKey - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (–≤–∞—à: 2RKCYkDs8AaQSMfukkAnStwSMz36gWT7m8f73izpcpCh)
     * @param {string} network - –°–µ—Ç—å Solana (devnet/testnet/mainnet-beta)
     * @param {string} customRpcUrl - –ö–∞—Å—Ç–æ–º–Ω—ã–π RPC URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    async initialize(privateKey = "2RKCYkDs8AaQSMfukkAnStwSMz36gWT7m8f73izpcpCh", network = "devnet", customRpcUrl = null) {
        try {
            console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana Web3 –∫–ª–∏–µ–Ω—Ç–∞...");
            
            this.network = network;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
            const rpcUrl = customRpcUrl || this.getRpcUrl(network);
            this.connection = new Connection(rpcUrl, "confirmed");
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            const secretKey = bs58.decode(privateKey);
            this.wallet = Keypair.fromSecretKey(secretKey);
            
            console.log("üí∞ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:", this.wallet.publicKey.toString());
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi –¥–ª—è Metaplex
            this.umi = createUmi(rpcUrl);
            
            // –°–æ–∑–¥–∞–µ–º keypair –¥–ª—è Umi –∏–∑ —Ç–æ–≥–æ –∂–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            const umiKeypair = this.umi.eddsa.createKeypairFromSecretKey(secretKey);
            this.umi.use(keypairIdentity(umiKeypair));
            this.umi.use(mplTokenMetadata());
            
            this.initialized = true;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            const balance = await this.getBalance();
            console.log("üíµ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:", balance, "SOL");
            
            if (balance < 0.01) {
                console.log("‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫");
                if (network === "devnet") {
                    console.log("üí° –î–ª—è devnet –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ SOL: solana airdrop 2", this.wallet.publicKey.toString(), "--url devnet");
                }
            }
            
            return {
                success: true,
                wallet: this.wallet.publicKey.toString(),
                balance,
                network: this.network,
                rpcUrl
            };
            
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Solana –∫–ª–∏–µ–Ω—Ç–∞:", error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å RPC URL –¥–ª—è —Å–µ—Ç–∏
     */
    getRpcUrl(network) {
        switch (network) {
            case "devnet":
                return clusterApiUrl("devnet");
            case "testnet":
                return clusterApiUrl("testnet");
            case "mainnet-beta":
                return clusterApiUrl("mainnet-beta");
            default:
                return clusterApiUrl("devnet");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ SOL
     */
    async getBalance() {
        if (!this.connection || !this.wallet) {
            throw new Error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }
        
        const balance = await this.connection.getBalance(this.wallet.publicKey);
        return balance / LAMPORTS_PER_SOL;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é NFT –¥–ª—è –∏–≥—Ä—ã
     * @param {Object} collectionData - –î–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
     */
    async createCollection(collectionData) {
        if (!this.initialized) {
            throw new Error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        try {
            console.log("üéÆ –°–æ–∑–¥–∞–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", collectionData.name);

            const collectionSigner = generateSigner(this.umi);

            const createCollectionTx = await createNft(this.umi, {
                mint: collectionSigner,
                name: collectionData.name,
                symbol: collectionData.symbol,
                uri: collectionData.uri || "",
                sellerFeeBasisPoints: percentAmount(5), // 5% —Ä–æ—è–ª—Ç–∏
                isCollection: true,
                creators: some([
                    {
                        address: this.umi.identity.publicKey,
                        verified: true,
                        share: 100,
                    },
                ]),
            });

            const result = await createCollectionTx.sendAndConfirm(this.umi);
            
            console.log("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!");
            console.log("üîó Collection Mint:", collectionSigner.publicKey);
            console.log("üìÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", bs58.encode(result.signature));

            return {
                success: true,
                collectionMint: collectionSigner.publicKey,
                transaction: bs58.encode(result.signature),
                name: collectionData.name,
                symbol: collectionData.symbol
            };

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å NFT –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
     * @param {Object} nftData - –î–∞–Ω–Ω—ã–µ NFT
     * @param {string} collectionMint - –ê–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    async createGameItemNFT(nftData, collectionMint = null) {
        if (!this.initialized) {
            throw new Error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        try {
            console.log("üé® –°–æ–∑–¥–∞–Ω–∏–µ NFT –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:", nftData.name);

            const nftSigner = generateSigner(this.umi);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            const metadata = {
                name: nftData.name,
                symbol: nftData.symbol || "ITEM",
                description: nftData.description || "–ò–≥—Ä–æ–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç NFT",
                image: nftData.image || "",
                attributes: [
                    {
                        trait_type: "Game",
                        value: nftData.game || "Unknown Game"
                    },
                    {
                        trait_type: "Type",
                        value: nftData.type || "item"
                    },
                    {
                        trait_type: "Rarity",
                        value: nftData.rarity || "common"
                    },
                    {
                        trait_type: "Level",
                        value: nftData.level?.toString() || "1"
                    }
                ],
                properties: {
                    category: "image",
                    files: nftData.image ? [
                        {
                            uri: nftData.image,
                            type: "image/png"
                        }
                    ] : [],
                    creators: [
                        {
                            address: this.wallet.publicKey.toString(),
                            share: 100
                        }
                    ]
                }
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç—ã
            if (nftData.stats) {
                Object.entries(nftData.stats).forEach(([key, value]) => {
                    metadata.attributes.push({
                        trait_type: key.charAt(0).toUpperCase() + key.slice(1),
                        value: value.toString()
                    });
                });
            }

            // –°–æ–∑–¥–∞–µ–º NFT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            const nftConfig = {
                mint: nftSigner,
                name: nftData.name,
                symbol: nftData.symbol || "ITEM",
                uri: nftData.metadataUri || "", // URI –∫ JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
                sellerFeeBasisPoints: percentAmount(5), // 5% —Ä–æ—è–ª—Ç–∏
                creators: some([
                    {
                        address: this.umi.identity.publicKey,
                        verified: true,
                        share: 100,
                    },
                ]),
            };

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            if (collectionMint) {
                nftConfig.collection = some({
                    key: publicKey(collectionMint),
                    verified: false,
                });
            }

            const createNftTx = await createNft(this.umi, nftConfig);
            const result = await createNftTx.sendAndConfirm(this.umi);

            console.log("‚úÖ NFT —Å–æ–∑–¥–∞–Ω!");
            console.log("üîó NFT Mint:", nftSigner.publicKey);
            console.log("üìÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", bs58.encode(result.signature));

            return {
                success: true,
                nftMint: nftSigner.publicKey,
                transaction: bs58.encode(result.signature),
                metadata,
                collectionMint,
                explorer: `https://explorer.solana.com/address/${nftSigner.publicKey}?cluster=${this.network}`
            };

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT:", error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT
     * @param {string} mintAddress - –ê–¥—Ä–µ—Å mint NFT
     */
    async getNFTInfo(mintAddress) {
        if (!this.initialized) {
            throw new Error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        try {
            const mintPublicKey = new PublicKey(mintAddress);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ mint
            const mintInfo = await this.connection.getParsedAccountInfo(mintPublicKey);
            
            if (!mintInfo.value) {
                throw new Error("NFT –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const [metadataPda] = await findMetadataPda(this.umi, {
                mint: publicKey(mintAddress)
            });

            console.log("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ NFT:", mintAddress);

            return {
                success: true,
                mint: mintAddress,
                metadataPda: metadataPda,
                mintInfo: mintInfo.value,
                explorer: `https://explorer.solana.com/address/${mintAddress}?cluster=${this.network}`
            };

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ NFT:", error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    async checkConnection() {
        if (!this.connection) {
            return false;
        }

        try {
            await this.connection.getSlot();
            return true;
        } catch (error) {
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å–µ—Ç–∏
     */
    async getVersion() {
        if (!this.connection) {
            throw new Error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        return await this.connection.getVersion();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å SOL (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     * @param {string} toAddress - –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
     * @param {number} amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL
     */
    async sendSOL(toAddress, amount) {
        if (!this.initialized) {
            throw new Error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        try {
            const transaction = new Transaction().add(
                SystemProgram.transfer({
                    fromPubkey: this.wallet.publicKey,
                    toPubkey: new PublicKey(toAddress),
                    lamports: amount * LAMPORTS_PER_SOL,
                })
            );

            const signature = await this.connection.sendTransaction(transaction, [this.wallet]);
            await this.connection.confirmTransaction(signature);

            console.log("üí∏ SOL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
            console.log("üìÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", signature);

            return {
                success: true,
                signature,
                amount,
                from: this.wallet.publicKey.toString(),
                to: toAddress
            };

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SOL:", error);
            throw error;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
export const solanaWeb3Client = new SolanaWeb3Client();

export default SolanaWeb3Client;
