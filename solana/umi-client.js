import { createUmi } from '@metaplex-foundation/umi-bundle-defaults';
import { generateSigner, percentAmount, sol } from '@metaplex-foundation/umi';

/**
 * üéÆ Umi Client –¥–ª—è Solana Game Marketplace
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NFT –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Metaplex Umi
 */

class UmiClient {
  constructor() {
    this.umi = null;
    this.initialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi –∫–ª–∏–µ–Ω—Ç–∞
   * @param {string} rpcUrl - URL RPC —É–∑–ª–∞ Solana
   * @param {string} keypairPath - –ü—É—Ç—å –∫ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  async initialize(rpcUrl = 'http://localhost:8899', keypairPath = null) {
    try {
      // –°–æ–∑–¥–∞–µ–º Umi —ç–∫–∑–µ–º–ø–ª—è—Ä
      this.umi = createUmi(rpcUrl);

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë
      if (keypairPath) {
        const { readFileSync } = await import('fs');
        const keypairData = JSON.parse(readFileSync(keypairPath, 'utf8'));
        const keypair = this.umi.eddsa.createKeypairFromSecretKey(new Uint8Array(keypairData));
        this.umi.use(keypair);
      }

      this.initialized = true;
      console.log('‚úÖ Umi –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('üîó RPC URL:', rpcUrl);
      console.log('üîë Wallet:', this.umi.identity.publicKey);

      return this.umi;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Umi:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã
   * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   */
  async createGameCollection(gameData) {
    if (!this.initialized) {
      throw new Error('Umi –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const collectionMint = generateSigner(this.umi);

      const metadata = {
        name: gameData.name,
        symbol: gameData.symbol,
        description: gameData.description,
        image: gameData.image || '',
        attributes: [
          { trait_type: 'Game Type', value: gameData.type || 'Unknown' },
          { trait_type: 'Genre', value: gameData.genre || 'Gaming' },
          { trait_type: 'Developer', value: gameData.developer || 'Unknown' }
        ],
        properties: {
          category: 'image',
          files: gameData.image ? [{ uri: gameData.image, type: 'image/png' }] : []
        }
      };

      console.log('üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã:', gameData.name);
      console.log('üè∑Ô∏è Mint –∞–¥—Ä–µ—Å:', collectionMint.publicKey);

      return {
        success: true,
        collectionMint: collectionMint.publicKey,
        metadata,
        message: `–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã "${gameData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ NFT –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
   * @param {Object} itemData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
   * @param {string} collectionMint - –ê–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è NFT
   */
  async createItemNFT(itemData, collectionMint) {
    if (!this.initialized) {
      throw new Error('Umi –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const itemMint = generateSigner(this.umi);

      const metadata = {
        name: itemData.name,
        symbol: itemData.symbol || 'ITEM',
        description: itemData.description,
        image: itemData.image || '',
        attributes: [
          { trait_type: 'Type', value: itemData.type },
          { trait_type: 'Rarity', value: itemData.rarity },
          { trait_type: 'Level', value: itemData.level?.toString() || '1' },
          { trait_type: 'Game', value: itemData.game },
          ...(itemData.stats ? Object.entries(itemData.stats).map(([key, value]) => ({
            trait_type: key,
            value: value.toString()
          })) : [])
        ],
        properties: {
          category: 'image',
          files: itemData.image ? [{ uri: itemData.image, type: 'image/png' }] : []
        }
      };

      console.log('‚öîÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ NFT –ø—Ä–µ–¥–º–µ—Ç–∞:', itemData.name);
      console.log('üè∑Ô∏è Mint –∞–¥—Ä–µ—Å:', itemMint.publicKey);

      return {
        success: true,
        itemMint: itemMint.publicKey,
        metadata,
        collectionMint,
        message: `NFT –ø—Ä–µ–¥–º–µ—Ç "${itemData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ NFT
   * @param {string} nftMint - –ê–¥—Ä–µ—Å NFT
   * @param {number} price - –¶–µ–Ω–∞ –≤ SOL
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞
   */
  async createListing(nftMint, price) {
    if (!this.initialized) {
      throw new Error('Umi –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const priceInLamports = sol(price).basisPoints;

      console.log('üè™ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ NFT');
      console.log('üè∑Ô∏è NFT Mint:', nftMint);
      console.log('üí∞ –¶–µ–Ω–∞:', `${price} SOL`);

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      return {
        success: true,
        listingId: `listing_${Date.now()}`,
        nftMint,
        price: priceInLamports,
        seller: this.umi.identity.publicKey,
        message: `–õ–∏—Å—Ç–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ü–µ–Ω—ã ${price} SOL`
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö NFT
   * @param {string} mintAddress - –ê–¥—Ä–µ—Å mint NFT
   * @returns {Object} –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT
   */
  async getNFTMetadata(mintAddress) {
    if (!this.initialized) {
      throw new Error('Umi –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö NFT:', mintAddress);
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      return {
        success: true,
        mint: mintAddress,
        metadata: {
          name: 'Game Item NFT',
          symbol: 'ITEM',
          description: 'Gaming NFT Item',
          image: '',
          attributes: []
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   * @returns {Object} –ë–∞–ª–∞–Ω—Å –≤ SOL
   */
  async getWalletBalance() {
    if (!this.initialized) {
      throw new Error('Umi –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const balance = await this.umi.rpc.getBalance(this.umi.identity.publicKey);
      const solBalance = Number(balance.basisPoints) / 1000000000; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ SOL

      return {
        success: true,
        publicKey: this.umi.identity.publicKey,
        balance: solBalance,
        balanceLamports: balance.basisPoints
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
   * @returns {boolean} –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async checkConnection() {
    if (!this.initialized) {
      return false;
    }

    try {
      await this.umi.rpc.getSlot();
      return true;
    } catch (error) {
      console.error('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const umiClient = new UmiClient();
export default UmiClient;
