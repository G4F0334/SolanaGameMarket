import { solanaWeb3Client } from "./solana-web3-client.js";
import Item from "../items/item.entity.js";

/**
 * üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Solana Web3.js NFT –æ–ø–µ—Ä–∞—Ü–∏–π
 * –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º NFT –∏ marketplace
 */

// POST /api/solana/web3/init - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –∫–ª–∏–µ–Ω—Ç–∞
export const initializeWeb3Client = async (req, res) => {
    try {
        const { 
            privateKey = "2RKCYkDs8AaQSMfukkAnStwSMz36gWT7m8f73izpcpCh", 
            network = "devnet", 
            customRpcUrl 
        } = req.body || {};

        console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana Web3 –∫–ª–∏–µ–Ω—Ç–∞...");

        const result = await solanaWeb3Client.initialize(privateKey, network, customRpcUrl);

        res.status(200).json({
            success: true,
            message: "üéÆ Solana Web3 –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!",
            data: {
                wallet: result.wallet,
                balance: result.balance,
                network: result.network,
                rpcUrl: result.rpcUrl,
                initialized: true,
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3 –∫–ª–∏–µ–Ω—Ç–∞:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Solana Web3 –∫–ª–∏–µ–Ω—Ç–∞",
            error: error.message
        });
    }
};

// GET /api/solana/web3/status - –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
export const getWeb3Status = async (req, res) => {
    try {
        if (!solanaWeb3Client.initialized) {
            return res.status(400).json({
                success: false,
                message: "Web3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                data: {
                    initialized: false
                }
            });
        }

        const balance = await solanaWeb3Client.getBalance();
        const connected = await solanaWeb3Client.checkConnection();
        const version = await solanaWeb3Client.getVersion();

        res.status(200).json({
            success: true,
            data: {
                initialized: true,
                wallet: solanaWeb3Client.wallet.publicKey.toString(),
                balance,
                connected,
                network: solanaWeb3Client.network,
                version,
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Web3 –∫–ª–∏–µ–Ω—Ç–∞",
            error: error.message
        });
    }
};

// POST /api/solana/web3/create-collection - –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
export const createGameCollection = async (req, res) => {
    try {
        if (!solanaWeb3Client.initialized) {
            return res.status(400).json({
                success: false,
                message: "Web3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ /api/solana/web3/init"
            });
        }

        const {
            name,
            symbol,
            description,
            uri,
            game,
            type = "Gaming Collection"
        } = req.body;

        if (!name || !symbol) {
            return res.status(400).json({
                success: false,
                message: "–ü–æ–ª—è name –∏ symbol –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        console.log("üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", name);

        const collectionData = {
            name,
            symbol,
            description: description || `NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã ${name}`,
            uri: uri || "",
            game,
            type
        };

        const result = await solanaWeb3Client.createCollection(collectionData);

        res.status(200).json({
            success: true,
            message: `üé® –ö–æ–ª–ª–µ–∫—Ü–∏—è "${name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`,
            data: {
                collectionMint: result.collectionMint,
                transaction: result.transaction,
                name: result.name,
                symbol: result.symbol,
                explorer: `https://explorer.solana.com/address/${result.collectionMint}?cluster=${solanaWeb3Client.network}`,
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            error: error.message
        });
    }
};

// POST /api/solana/web3/mint-nft - –°–æ–∑–¥–∞–Ω–∏–µ NFT –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
export const mintGameItemNFT = async (req, res) => {
    try {
        if (!solanaWeb3Client.initialized) {
            return res.status(400).json({
                success: false,
                message: "Web3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ /api/solana/web3/init"
            });
        }

        const {
            itemId,
            collectionMint,
            metadataUri,
            customName,
            customSymbol,
            customDescription,
            customImage
        } = req.body;

        let nftData;

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω itemId, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        if (itemId) {
            const item = await Item.findByPk(itemId);
            if (!item) {
                return res.status(404).json({
                    success: false,
                    message: `–ü—Ä–µ–¥–º–µ—Ç —Å ID ${itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
                });
            }

            nftData = {
                name: customName || item.name,
                symbol: customSymbol || "ITEM",
                description: customDescription || item.description || `NFT –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ ${item.name}`,
                image: customImage || item.image,
                game: item.game,
                type: item.type,
                rarity: item.rarity,
                level: item.level,
                stats: item.stats,
                metadataUri
            };

            console.log("üé® –°–æ–∑–¥–∞–Ω–∏–µ NFT –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:", item.name, "(ID:", itemId, ")");
        } else {
            // –°–æ–∑–¥–∞–µ–º NFT —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            nftData = {
                name: customName || "Game Item NFT",
                symbol: customSymbol || "ITEM",
                description: customDescription || "–ò–≥—Ä–æ–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç NFT",
                image: customImage,
                metadataUri
            };

            console.log("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ NFT:", nftData.name);
        }

        if (!nftData.name) {
            return res.status(400).json({
                success: false,
                message: "–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ NFT (name)"
            });
        }

        const result = await solanaWeb3Client.createGameItemNFT(nftData, collectionMint);

        // –ï—Å–ª–∏ NFT —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if (itemId) {
            await Item.update(
                {
                    nft: {
                        mint: result.nftMint,
                        transaction: result.transaction,
                        collection: collectionMint,
                        explorer: result.explorer,
                        createdAt: new Date().toISOString()
                    }
                },
                { where: { id: itemId } }
            );

            console.log("‚úÖ –ü—Ä–µ–¥–º–µ—Ç –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω —Å NFT –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π");
        }

        res.status(200).json({
            success: true,
            message: `üé® NFT "${nftData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`,
            data: {
                itemId: itemId || null,
                nftMint: result.nftMint,
                transaction: result.transaction,
                metadata: result.metadata,
                collectionMint: result.collectionMint,
                explorer: result.explorer,
                network: solanaWeb3Client.network,
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT",
            error: error.message
        });
    }
};

// GET /api/solana/web3/nft/:mint - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ NFT
export const getNFTInfo = async (req, res) => {
    try {
        if (!solanaWeb3Client.initialized) {
            return res.status(400).json({
                success: false,
                message: "Web3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            });
        }

        const { mint } = req.params;

        if (!mint) {
            return res.status(400).json({
                success: false,
                message: "–ù–µ —É–∫–∞–∑–∞–Ω mint –∞–¥—Ä–µ—Å NFT"
            });
        }

        const result = await solanaWeb3Client.getNFTInfo(mint);

        res.status(200).json({
            success: true,
            data: result
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ NFT:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ NFT",
            error: error.message
        });
    }
};

// GET /api/solana/web3/balance - –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
export const getWalletBalance = async (req, res) => {
    try {
        if (!solanaWeb3Client.initialized) {
            return res.status(400).json({
                success: false,
                message: "Web3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            });
        }

        const balance = await solanaWeb3Client.getBalance();

        res.status(200).json({
            success: true,
            data: {
                publicKey: solanaWeb3Client.wallet.publicKey.toString(),
                balance,
                balanceLamports: balance * 1000000000,
                network: solanaWeb3Client.network,
                explorer: `https://explorer.solana.com/address/${solanaWeb3Client.wallet.publicKey.toString()}?cluster=${solanaWeb3Client.network}`
            }
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞",
            error: error.message
        });
    }
};

// POST /api/solana/web3/send-sol - –û—Ç–ø—Ä–∞–≤–∫–∞ SOL (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export const sendSOL = async (req, res) => {
    try {
        if (!solanaWeb3Client.initialized) {
            return res.status(400).json({
                success: false,
                message: "Web3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            });
        }

        const { toAddress, amount } = req.body;

        if (!toAddress || !amount) {
            return res.status(400).json({
                success: false,
                message: "–ü–æ–ª—è toAddress –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            });
        }

        if (amount <= 0) {
            return res.status(400).json({
                success: false,
                message: "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
            });
        }

        const result = await solanaWeb3Client.sendSOL(toAddress, amount);

        res.status(200).json({
            success: true,
            message: `üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount} SOL –Ω–∞ –∞–¥—Ä–µ—Å ${toAddress}`,
            data: result
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SOL:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SOL",
            error: error.message
        });
    }
};

// POST /api/solana/web3/batch-mint - –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ NFT
export const batchMintNFTs = async (req, res) => {
    try {
        if (!solanaWeb3Client.initialized) {
            return res.status(400).json({
                success: false,
                message: "Web3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            });
        }

        const { itemIds, collectionMint } = req.body;

        if (!itemIds || !Array.isArray(itemIds) || itemIds.length === 0) {
            return res.status(400).json({
                success: false,
                message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∞—Å—Å–∏–≤ itemIds"
            });
        }

        if (itemIds.length > 10) {
            return res.status(400).json({
                success: false,
                message: "–ó–∞ —Ä–∞–∑ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 10 NFT"
            });
        }

        console.log(`üé® –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ NFT –¥–ª—è ${itemIds.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤...`);

        const results = [];
        const errors = [];

        for (const itemId of itemIds) {
            try {
                const item = await Item.findByPk(itemId);
                if (!item) {
                    errors.push({ itemId, error: "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
                    continue;
                }

                const nftData = {
                    name: item.name,
                    symbol: "ITEM",
                    description: item.description || `NFT –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ ${item.name}`,
                    image: item.image,
                    game: item.game,
                    type: item.type,
                    rarity: item.rarity,
                    level: item.level,
                    stats: item.stats
                };

                const result = await solanaWeb3Client.createGameItemNFT(nftData, collectionMint);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –ë–î
                await Item.update(
                    {
                        nft: {
                            mint: result.nftMint,
                            transaction: result.transaction,
                            collection: collectionMint,
                            explorer: result.explorer,
                            createdAt: new Date().toISOString()
                        }
                    },
                    { where: { id: itemId } }
                );

                results.push({
                    itemId,
                    nftMint: result.nftMint,
                    transaction: result.transaction,
                    explorer: result.explorer
                });

                console.log(`‚úÖ NFT —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${itemId}: ${result.nftMint}`);

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${itemId}:`, error);
                errors.push({ itemId, error: error.message });
            }
        }

        res.status(200).json({
            success: true,
            message: `üé® –°–æ–∑–¥–∞–Ω–æ ${results.length} NFT –∏–∑ ${itemIds.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`,
            data: {
                successful: results,
                errors,
                totalRequested: itemIds.length,
                totalCreated: results.length,
                totalErrors: errors.length
            }
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è NFT:", error);
        res.status(500).json({
            success: false,
            message: "–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è NFT",
            error: error.message
        });
    }
};
