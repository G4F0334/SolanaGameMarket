import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import compression from 'compression';
import dotenv from 'dotenv';
import { sequelize, testConnection, syncDatabase } from './database.js';
import Item from './items/item.entity.js';
import * as itemController from './items/item.controller.js';
import solanaRoutes from './solana/solana.routes.js';

// Load environment variables
dotenv.config();

// üöÄ –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const PORT = process.env.PORT || 3000;

// üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ middleware
app.use(helmet()); // –ó–∞—â–∏—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://yourdomain.com'] 
    : ['http://localhost:3000', 'http://localhost:3001']
}));
app.use(compression()); // –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(morgan('combined')); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// üö¶ Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
  }
});
app.use('/api/', limiter);

// üé® ASCII –∞—Ä—Ç –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
const asciiArt = `
  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  ‚ïë                                                           ‚ïë
  ‚ïë   üéÆ SOLANA GAME MARKETPLACE DATABASE API üéÆ              ‚ïë
  ‚ïë                                                           ‚ïë
  ‚ïë   üî• NFT Gaming Items Marketplace                         ‚ïë
  ‚ïë   üî• Powered by Solana Blockchain                         ‚ïë
  ‚ïë   üî• Create, Trade, Dominate                              ‚ïë
  ‚ïë                                                           ‚ïë
  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`;

// üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫—Ä–∞—Å–∏–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
app.get('/', (req, res) => {
  res.json({
    message: "üéÆ Solana Game Marketplace API",
    version: "1.0.0",
    status: "üü¢ Online",
    endpoints: {
      items: {
        "GET /api/items": "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
        "GET /api/items/:id": "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID",
        "POST /api/items": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç",
        "PUT /api/items/:id": "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
        "DELETE /api/items/:id": "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
        "GET /api/items/game/:gameName": "–ü—Ä–µ–¥–º–µ—Ç—ã –∏–≥—Ä—ã",
        "GET /api/items/nft": "–¢–æ–ª—å–∫–æ NFT –ø—Ä–µ–¥–º–µ—Ç—ã"
      },
      solana: {
        "POST /api/solana/init": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana –∫–ª–∏–µ–Ω—Ç–∞",
        "GET /api/solana/status": "–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        "POST /api/solana/collection": "–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–≥—Ä—ã",
        "POST /api/solana/mint-nft": "–°–æ–∑–¥–∞—Ç—å NFT –ø—Ä–µ–¥–º–µ—Ç–∞",
        "POST /api/solana/list-nft": "–í—ã—Å—Ç–∞–≤–∏—Ç—å NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
        "GET /api/solana/nft/:mint": "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT",
        "GET /api/solana/wallet/balance": "–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"
      },
      status: {
        "GET /api/health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API",
        "GET /api/stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"
      }
    },
    documentation: "/api/docs",
    blockchain: "Solana",
    features: ["NFT Minting", "Marketplace", "Game Items", "Trading"]
  });
});

// üìä API Routes –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.get('/api/items', itemController.getAllItems);
app.get('/api/items/nft', itemController.getNftItems);
app.get('/api/items/game/:gameName', itemController.getItemsByGame);
app.get('/api/items/:id', itemController.getItemById);
app.post('/api/items', itemController.createItem);
app.put('/api/items/:id', itemController.updateItem);
app.delete('/api/items/:id', itemController.deleteItem);

// ü™ô Solana API Routes
app.use('/api/solana', solanaRoutes);

// üè• Health check endpoint
app.get('/api/health', async (req, res) => {
  try {
    await sequelize.authenticate();
    res.status(200).json({
      status: 'üü¢ Healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      database: 'üü¢ Connected',
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'
      },
      version: '1.0.0'
    });
  } catch (error) {
    res.status(503).json({
      status: 'üî¥ Unhealthy',
      timestamp: new Date().toISOString(),
      database: 'üî¥ Disconnected',
      error: error.message
    });
  }
});

// üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
app.get('/api/stats', async (req, res) => {
  try {
    const totalItems = await Item.count();
    const nftItems = await Item.count({ where: { nft: { [sequelize.Sequelize.Op.not]: null } } });
    const gameStats = await Item.findAll({
      attributes: [
        'game',
        [sequelize.fn('COUNT', sequelize.col('id')), 'count']
      ],
      group: ['game'],
      order: [[sequelize.fn('COUNT', sequelize.col('id')), 'DESC']]
    });

    const typeStats = await Item.findAll({
      attributes: [
        'type',
        [sequelize.fn('COUNT', sequelize.col('id')), 'count']
      ],
      group: ['type'],
      order: [[sequelize.fn('COUNT', sequelize.col('id')), 'DESC']]
    });

    res.json({
      success: true,
      stats: {
        totalItems,
        nftItems,
        regularItems: totalItems - nftItems,
        nftPercentage: totalItems > 0 ? Math.round((nftItems / totalItems) * 100) : 0,
        gameDistribution: gameStats,
        typeDistribution: typeStats,
        lastUpdated: new Date().toISOString()
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

// üìö API Documentation
app.get('/api/docs', (req, res) => {
  res.json({
    title: "üéÆ Solana Game Marketplace API Documentation",
    version: "1.0.0",
    description: "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏ NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ Solana",
    baseUrl: `http://localhost:${PORT}`,
    
    endpoints: {
      // üì¶ Items API
      items: {
        "GET /api/items": {
          description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
          parameters: {
            page: "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)",
            limit: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)",
            game: "–§–∏–ª—å—Ç—Ä –ø–æ –∏–≥—Ä–µ",
            type: "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É (weapon, armor, accessory, consumable, material)",
            hasNft: "–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é NFT (true/false)"
          },
          example: "GET /api/items?page=1&limit=10&game=Epic%20RPG&hasNft=true"
        },
        "GET /api/items/:id": {
          description: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID",
          parameters: {
            id: "ID –ø—Ä–µ–¥–º–µ—Ç–∞"
          },
          example: "GET /api/items/1"
        },
        "POST /api/items": {
          description: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç",
          body: {
            name: "string (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
            image: "string (URL) - –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            game: "string (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã",
            type: "string - –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (weapon/armor/accessory/consumable/material)",
            description: "string - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
            rarity: "string - –†–µ–¥–∫–æ—Å—Ç—å (common/uncommon/rare/epic/legendary)",
            level: "number - –£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞",
            stats: "object - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"
          },
          example: {
            name: "Legendary Sword",
            description: "A powerful sword forged by ancient masters",
            type: "weapon",
            rarity: "legendary",
            game: "Epic RPG",
            level: 50,
            stats: { damage: 150, speed: 80 },
            image: "https://example.com/sword.png"
          }
        },
        "PUT /api/items/:id": {
          description: "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
          parameters: { id: "ID –ø—Ä–µ–¥–º–µ—Ç–∞" },
          body: "–ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ POST)"
        },
        "DELETE /api/items/:id": {
          description: "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
          parameters: { id: "ID –ø—Ä–µ–¥–º–µ—Ç–∞" }
        },
        "GET /api/items/game/:gameName": {
          description: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã",
          parameters: { gameName: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã" },
          example: "GET /api/items/game/Epic%20RPG"
        },
        "GET /api/items/nft": {
          description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å NFT",
          example: "GET /api/items/nft"
        }
      },

      // ü™ô Solana Blockchain API
      solana: {
        "POST /api/solana/init": {
          description: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º",
          body: {
            rpcUrl: "string (optional) - URL RPC —É–∑–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: devnet)",
            keypairPath: "string (optional) - –ü—É—Ç—å –∫ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–µ"
          },
          example: {
            rpcUrl: "https://api.devnet.solana.com"
          },
          response: {
            success: true,
            message: "Solana –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            data: {
              wallet: "wallet_public_key",
              balance: 1.5,
              connected: true,
              rpcUrl: "https://api.devnet.solana.com"
            }
          }
        },
        "GET /api/solana/status": {
          description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana",
          response: {
            success: true,
            data: {
              initialized: true,
              wallet: "wallet_public_key",
              balance: 1.5,
              connected: true
            }
          }
        },
        "POST /api/solana/collection": {
          description: "–°–æ–∑–¥–∞–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã",
          body: {
            name: "string (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            symbol: "string (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - –°–∏–º–≤–æ–ª –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            description: "string - –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            image: "string - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            type: "string - –¢–∏–ø –∏–≥—Ä—ã",
            genre: "string - –ñ–∞–Ω—Ä –∏–≥—Ä—ã",
            developer: "string - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã"
          },
          example: {
            name: "Epic RPG Items",
            symbol: "ERPI",
            description: "Rare and legendary items from Epic RPG game",
            image: "https://example.com/collection.png",
            type: "RPG",
            genre: "Fantasy",
            developer: "Epic Games Studio"
          },
          response: {
            success: true,
            message: "–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            data: {
              collectionMint: "collection_mint_address",
              metadata: "collection_metadata"
            }
          }
        },
        "POST /api/solana/mint-nft": {
          description: "–°–æ–∑–¥–∞–Ω–∏–µ NFT –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞",
          body: {
            itemId: "number (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - ID –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            collectionMint: "string (optional) - –ê–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
          },
          example: {
            itemId: 1,
            collectionMint: "collection_mint_address_here"
          },
          response: {
            success: true,
            message: "NFT –ø—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            data: {
              itemId: 1,
              itemMint: "nft_mint_address",
              collectionMint: "collection_mint_address",
              metadata: "nft_metadata"
            }
          }
        },
        "POST /api/solana/list-nft": {
          description: "–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ",
          body: {
            itemId: "number (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - ID –ø—Ä–µ–¥–º–µ—Ç–∞ —Å NFT",
            price: "number (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - –¶–µ–Ω–∞ –≤ SOL"
          },
          example: {
            itemId: 1,
            price: 0.5
          },
          response: {
            success: true,
            message: "–õ–∏—Å—Ç–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ü–µ–Ω—ã 0.5 SOL",
            data: {
              itemId: 1,
              listingId: "listing_id",
              nftMint: "nft_mint_address",
              price: 0.5,
              seller: "seller_wallet"
            }
          }
        },
        "GET /api/solana/nft/:mint": {
          description: "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö NFT –ø–æ mint –∞–¥—Ä–µ—Å—É",
          parameters: {
            mint: "string - Mint –∞–¥—Ä–µ—Å NFT"
          },
          example: "GET /api/solana/nft/nft_mint_address_here",
          response: {
            success: true,
            data: {
              mint: "nft_mint_address",
              metadata: {
                name: "Legendary Sword",
                symbol: "ITEM",
                description: "A powerful sword...",
                image: "https://example.com/sword.png",
                attributes: "nft_attributes"
              }
            }
          }
        },
        "GET /api/solana/wallet/balance": {
          description: "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –≤ SOL",
          response: {
            success: true,
            data: {
              publicKey: "wallet_public_key",
              balance: 1.5,
              balanceLamports: 1500000000
            }
          }
        }
      },

      // üè• System API
      system: {
        "GET /api/health": {
          description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
          response: {
            status: "üü¢ Healthy",
            timestamp: "2025-09-13T...",
            uptime: 3600,
            database: "üü¢ Connected",
            memory: { used: "25 MB", total: "100 MB" }
          }
        },
        "GET /api/stats": {
          description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞",
          response: {
            totalItems: 150,
            nftItems: 45,
            totalGames: 12,
            topGames: ["Epic RPG", "Space Adventure"]
          }
        },
        "GET /": {
          description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API",
          response: {
            message: "üéÆ Solana Game Marketplace API",
            version: "1.0.0",
            status: "üü¢ Online",
            endpoints: "endpoint_list"
          }
        }
      }
    },

    // üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    workflows: {
      "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–∞–∂–∞ NFT –ø—Ä–µ–¥–º–µ—Ç–∞": [
        "1. POST /api/solana/init - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana",
        "2. POST /api/items - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ë–î",
        "3. POST /api/solana/collection - –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)",
        "4. POST /api/solana/mint-nft - –°–æ–∑–¥–∞–Ω–∏–µ NFT –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞",
        "5. POST /api/solana/list-nft - –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"
      ],
      "–ü–æ–∏—Å–∫ NFT –ø—Ä–µ–¥–º–µ—Ç–æ–≤": [
        "1. GET /api/items?hasNft=true - –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å NFT",
        "2. GET /api/items/game/GameName - –ü—Ä–µ–¥–º–µ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã",
        "3. GET /api/solana/nft/mint_address - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT"
      ]
    },

    // ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    configuration: {
      environment: process.env.NODE_ENV || 'development',
      solanaNetwork: "devnet",
      rpcUrl: process.env.SOLANA_RPC_URL || 'https://api.devnet.solana.com',
      database: "PostgreSQL",
      rateLimit: "100 requests per 15 minutes"
    },

    // üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
    notes: {
      devnet: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Solana devnet –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
      airdrop: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ SOL: solana airdrop 2 --url devnet",
      keypair: "–°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫: solana-keygen new",
      github: "https://github.com/G4F0334/SolanaGameMarket"
    }
  });
});

// üö´ 404 handler
app.use((req, res) => {
  res.status(404).json({
    error: 'üîç Endpoint not found',
    message: `Route ${req.originalUrl} not found`,
    availableRoutes: [
      'GET /',
      'GET /api/items',
      'POST /api/items',
      'GET /api/items/:id',
      'PUT /api/items/:id',
      'DELETE /api/items/:id',
      'GET /api/items/game/:gameName',
      'GET /api/items/nft',
      'POST /api/solana/init',
      'GET /api/solana/init',
      'GET /api/solana/status',
      'POST /api/solana/collection',
      'POST /api/solana/mint-nft',
      'POST /api/solana/list-nft',
      'GET /api/solana/nft/:mint',
      'GET /api/solana/wallet/balance',
      'GET /api/health',
      'GET /api/stats',
      'GET /api/docs'
    ]
  });
});

// üí• Error handler
app.use((error, req, res, next) => {
  console.error('üö® Server Error:', error);
  res.status(500).json({
    error: 'üí• Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong',
    timestamp: new Date().toISOString()
  });
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    console.log(asciiArt);
    console.log('üîÑ Initializing Solana Game Marketplace...\n');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° Connecting to PostgreSQL...');
    await testConnection();
    console.log('‚úÖ Database connected successfully!\n');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    console.log('üîÑ Synchronizing database models...');
    await syncDatabase();
    console.log('‚úÖ Database models synchronized!\n');

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log('üéâ SERVER STARTED SUCCESSFULLY! üéâ\n');
      console.log(`üåê Server running on: http://localhost:${PORT}`);
      console.log(`üìö API Documentation: http://localhost:${PORT}/api/docs`);
      console.log(`üè• Health Check: http://localhost:${PORT}/api/health`);
      console.log(`üìä Statistics: http://localhost:${PORT}/api/stats`);
      console.log(`\nüéÆ Ready to handle NFT gaming items!`);
      console.log('üî• Let\'s build the future of gaming! üî•\n');
    });

  } catch (error) {
    console.error('üí• Failed to start server:', error);
    process.exit(1);
  }
};

// üéØ Graceful shutdown
const gracefulShutdown = async (signal) => {
  console.log(`\nüì¥ Received ${signal}. Starting graceful shutdown...`);
  
  try {
    await sequelize.close();
    console.log('‚úÖ Database connection closed.');
    console.log('üëã Server shutdown complete. Goodbye!');
    process.exit(0);
  } catch (error) {
    console.error('üí• Error during shutdown:', error);
    process.exit(1);
  }
};

// Handle shutdown signals
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// üöÄ Start the magic!
startServer();

export default app;